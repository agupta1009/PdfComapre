package tabula;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.apache.pdfbox.pdmodel.PDDocument;
import technology.tabula.ObjectExtractor;
import technology.tabula.Page;
import technology.tabula.Table;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;

import java.awt.Color;
import java.awt.geom.Point2D;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.canvas.PdfCanvas;
import com.itextpdf.kernel.pdf.extgstate.PdfExtGState;
import com.itextpdf.kernel.pdf.layer.PdfLayer;

public class main {
	public static void compare(Table a,Table b) throws IOException
	{
		int min_row=a.getRowCount()>b.getRowCount()?b.getRowCount():a.getRowCount();
		int min_col=a.getColCount()>b.getColCount()?b.getColCount():a.getColCount();
		for(int i=0;i<min_row;i++)
		{
			for(int j=0;j<min_col;j++)
			{
				if(a.getCell(i, j).getText().equals(b.getCell(i, j).getText()))
				{
					continue;
				}
				else
				{
				FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
				String s=a.getCell(i, j).getText()+" "+"green"+" "+a.getCell(i, j).getBounds2D().toString()+"\n";
				s+=b.getCell(i, j).getText()+" "+"red"+" "+b.getCell(i, j).getBounds2D().toString()+"\n";
				writer.write(s);
				writer.close();
				}
			}
		}
		for(int i=min_row;i<a.getRowCount();i++)
		{
			for(int j=0;j<a.getColCount();j++)
			{
				FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
				String s=a.getCell(i, j).getText()+" "+"green"+" "+a.getCell(i, j).getBounds2D().toString()+"\n";
				writer.write(s);
				writer.close();
			}
		}
		
		for(int i=0;i<a.getRowCount();i++)
		{
			for(int j=min_col;j<a.getColCount();j++)
			{
				FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
				String s=a.getCell(i, j).getText()+" "+"green"+" "+a.getCell(i, j).getBounds2D().toString()+"\n";
				writer.write(s);
				writer.close();
			}
		}
		for(int i=min_row;i<b.getRowCount();i++)
		{
			for(int j=0;j<b.getColCount();j++)
			{
				FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
				String s=b.getCell(i, j).getText()+" "+"red"+" "+b.getCell(i, j).getBounds2D().toString()+"\n";
				writer.write(s);
				writer.close();
			}
		}
		
		for(int i=0;i<b.getRowCount();i++)
		{
			for(int j=min_col;j<b.getColCount();j++)
			{
				FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
				String s=b.getCell(i, j).getText()+" "+"red"+" "+b.getCell(i, j).getBounds2D().toString()+"\n";
				writer.write(s);
				writer.close();
			}
		}
			
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		PDDocument pd = PDDocument.load(new File("C:/Users/ankush.gupta/Desktop/Original.pdf"));
		ObjectExtractor oe = new ObjectExtractor(pd);

		SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm(); // Tabula algo.
		int n=pd.getNumberOfPages();
		List<Table> table1=new ArrayList<Table>();
		for(int k=1;k<=n;k++)
		{
			Page page = oe.extract(k); // extract only the ith page
			List<Table> table = sea.extract(page);
			for(Table c:table)	
				table1.add(c);
		}
		pd.close();
		oe.close();

		pd=PDDocument.load(new File("C:/Users/ankush.gupta/Desktop/Modified.pdf"));
		
//		for document 2
		
		oe=new ObjectExtractor(pd);
		n=pd.getNumberOfPages();
		List<Table> table2=new ArrayList<Table>();
		for(int k=1;k<=n;k++)
		{
			Page page = oe.extract(k); // extract only the ith page
			List<Table> table = sea.extract(page);
			for(Table c:table)
				table2.add(c);
		}
		pd.close();
		oe.close();

		System.out.println("original file");
		
		for(Table c:table1)
		{
			for(int i=0;i<c.getRowCount();i++)
			{
				for(int j=0;j<c.getColCount();j++)
					System.out.print(c.getCell(i, j).getText()+"\t");
				System.out.println();
			}
			System.out.println();
		}
		System.out.println("modified file");
		
		for(Table c:table2)
		{
			for(int i=0;i<c.getRowCount();i++)
			{
				for(int j=0;j<c.getColCount();j++)
					System.out.print(c.getCell(i, j).getText()+"\t");
				System.out.println();
			}
			System.out.println();
		}

		
		int i=0,j=0;
		for(;i<table1.size()&&j<table2.size();i++,j++)
		{
			Table a=table1.get(i);
			Table b=table2.get(j);
			compare(a,b);	
		}
		for(int m=i;m<table1.size();m++)
		{
			Table b=table1.get(m);
			for(int p=0;p<b.getRowCount();p++)
			{
				for(int q=0;q<b.getColCount();q++)
				{

					FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
					String s=b.getCell(p, q).getText()+" "+"green"+" "+b.getCell(p, q).getBounds2D().toString()+"\n";
					writer.write(s);
					writer.close();
				}
			}
			
		}
		for(int m=i;m<table2.size();m++)
		{
			Table b=table2.get(m);
			for(int p=0;p<b.getRowCount();p++)
			{
				for(int q=0;q<b.getColCount();q++)
				{

					FileWriter writer=new FileWriter(new File("C:/Users/ankush.gupta/Desktop/result.pdf"),true);
					String s=b.getCell(p, q).getText()+" "+"red"+" "+b.getCell(p, q).getBounds2D().toString()+"\n";
				
					writer.write(s);
					writer.close();
				}
			}
			
		}
		
		Scanner sc=new Scanner(new File("C:/Users/ankush.gupta/Desktop/result.pdf"));
		int counter=0;
		while(sc.hasNextLine())
		{
			System.out.println(sc.nextLine());
			counter++;
		
		}
		System.out.println(counter);
		sc.close();
//		
//		PdfDocument pdfDoc = new PdfDocument(new PdfWriter("C:\\Users\\ankush.gupta\\Desktop\\modified.pdf"));
//		PdfLayer pdflayer = new PdfLayer("main layer", pdfDoc);
//		pdflayer.setOn(true);
//		
//		PdfCanvas canvas = new PdfCanvas(pdfDoc.getPage(i));
//
//		canvas.beginLayer(pdflayer);
//		canvas.saveState()
//		.setFillColor(ColorConstants.RED)
//		.setExtGState(new PdfExtGState().setFillOpacity(0.5f))
//		.rectangle(72.3198, 111.07453, 156.03098, 14.975365)
//		.fill()
//		.restoreState();
//		canvas.endLayer();
//		pdfDoc.close();
//		

	}


}

